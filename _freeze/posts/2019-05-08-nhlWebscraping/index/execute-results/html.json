{
  "hash": "19bf0750e810ef7e52a6cdfdf49937de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Webscraping NHL Data with RSelenium, Part 1\"\ndate: '2019-05-08'\ncategories: R\n---\n\n\nI love hockey. I also love data science. What's better than merging the two and learn how to use RSelenium in the process?\n\nA while ago, I wrote some web-scraping [code](https://github.com/mitchbeebe/nhlStandings) to find the NHL standings as of Novermber 1st (roughly one month into the season). I was doing this in order to determine if a strong start to the season was related to end-of-season success. Fortunately, the website *dropyourgloves.com* had convenient and uniform URLs to simply combine season and date strings to create a valid URL to scrape the corresponding HTML table. Unfortunately, the website no longer exists!\n\nAfter some Google-Fu, I was unable to find a replacement website, however, I found [shrpsports.com](http://www.shrpsports.com), which has an easy-to-use dropdown UI, submit bottons, and resulting HTML table. This isn't as easy as find and replace in the code, so I needed to load RSelenium for automating the browser to populate dropdowns and click submit.\n\nI found that the preferred way to run RSelenium is via a headless browser running in Docker. This was the first case I found myself needing either technology. I still have work to do to write more robust code, but I got this working, so I wanted to post about it.\n\n**Set up Docker**\n\n-   First, I downloaded Docker [here](https://www.docker.com/products/docker-desktop)\n-   To start a headless browser, I ran `docker run -d -p 4445:4444 selenium/standalone-chrome` (the first time pulls the Docker image from DockerHub)\n\n**Connecting to the browser**\n\nThe R code below begins the webscraping journey.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import packages\nlibrary(RSelenium)\nlibrary(rvest)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(knitr)\nlibrary(kableExtra)\n\n# Start a docker container with Google Chrome on port 4444 on\n#   the server side inside the container and 4445 on my local machine\nsystem(\"docker run -d -p 4445:4444 selenium/standalone-chrome\")\n\n# Access the remote browser\nremDr <- RSelenium::remoteDriver(remoteServerAddr = \"localhost\",\n                                 port = 4445L,\n                                 browserName = \"chrome\")\n\n# Initialize a browsing session\nremDr$open(silent = TRUE)\n\n# Navigate to the website to scrape\nremDr$navigate(\"http://www.shrpsports.com/nhl/stand.htm\") \n\n# Save a screenshot and display below\nremDr$screenshot(file = \"screenshot.png\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\nHere's what the website looks like:\n\n------------------------------------------------------------------------\n\n![](./screenshot.png){width=\"100%\" height=\"100%\"}\n\n------------------------------------------------------------------------\n\n**Scrape NHL Standings**\n\nNow for the fun part. I wrote this function to fetch standings from the remote browser for any season and date or for season-end standings. There are a few pitfalls of this function regarding the NHL changing playoff format, conference assignments, etc. that will take quite a bit of elbow grease for a truly robust function, so I'll save that for another time. I also noticed a few data consistency issues, but hey, it's a free site from which I'm pulling data.\n\nFor the timebeing, this function simply returns the Eastern, Western, and, if pulling season-end standings, the Stanley Cup match-up. In a future post, I hope to try the analysis of \"Does a strong start to the season predict not only a playoff berth, but also playoff success?\" Having this function will allow for that to happen with far less repetitive programming.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetStandings <- function(season, month, date) {\n  # Gets the NHL standings for any season on any date or final conference standings\n  #\n  # Args:\n  #   season: Four-character string representing the NHL season (year in which Stanley\n  #     Cup is played for the season, e.g. \"2018\" is for the 2017-18 season)\n  #   month (optional): Three-character month abbreviation\n  #   date (optional): Character representing day of the month (e.g. \"1\", \"12\", \"27\")\n  #\n  # Returns:\n  #   The NHL standings in a dataframe\n  \n  # Enter the URL for the browser\n  remDr$navigate(\"http://www.shrpsports.com/nhl/stand.htm\") \n  \n  # Save the homepage HTML to reuse in several \n  homepage <- read_html(remDr$getPageSource()[[1]])\n  \n  # Get seasons from dropdown\n  valid_seasons <- homepage %>% \n    html_nodes(\"select[name='season']\") %>% \n    html_children() %>% \n    html_attr(\"value\")\n  \n  # Get months from dropdown\n  valid_mos <- homepage %>% \n    html_nodes(\"select[name='month']\") %>% \n    html_children() %>% \n    html_attr(\"value\")\n  \n  # Get days of month from dropdown\n  valid_dates <- homepage %>% \n    html_nodes(\"select[name='date']\") %>% \n    html_children() %>% \n    html_attr(\"value\")\n  \n  # Verify season input\n  if (!(season %in% valid_seasons)) stop(\"Invalid season\")\n  \n  # Determine if user wants final standings or standings as of a date\n  if (missing(month) | missing(date)) {\n    div_conf <- \"latefincnf\"\n    month <- \"\"\n    date <- \"\"\n    message(\"Getting season-end standings...\")\n  } else {\n    if (!(month %in% valid_mos)) stop(\"Invalid month\")\n    if (!(date %in% valid_dates)) stop(\"Invalid date\")\n    div_conf <- \"cnf\"\n    message(glue(\"Getting standings as of {month}-{date}...\"))\n  }\n  \n  # Select season input in dropdown\n  season <- remDr$findElement(using = 'css selector', \n                              glue(\"select[name='season'] option[value='{season}']\"))\n  season$clickElement()\n  \n  # Select division/conference in dropdown\n  divcnf <- remDr$findElement(using = 'css selector', \n                              glue(\"select[name='divcnf'] option[value='{div_conf}']\"))\n  divcnf$clickElement()\n  \n  # Select month in dropdown\n  month <- remDr$findElement(using = 'css selector', \n                             glue(\"select[name='month'] option[value='{month}']\"))\n  month$clickElement()\n  \n  # Select day of month in dropdown\n  dom <- remDr$findElement(using = 'css selector', \n                           glue(\"select[name='date'] option[value='{date}']\"))\n  dom$clickElement()\n  \n  # Click submit botton\n  submit <- remDr$findElement(using = 'css selector', \"input[type='submit']\")\n  submit$clickElement()\n  \n  # NOT RUN: This will take a screenshot of the current remote browser\n  #   screen and display it in the RStudio viewer\n  # remDr$screenshot(display = TRUE) \n  \n  # Read the HTML table from resulting webpage\n  raw_table <- read_html(remDr$getPageSource()[[1]]) %>% \n    html_table(fill = TRUE) %>% \n    .[[3]]\n  \n  # Names are stored in the second row, so rename the table accordingly\n  names(raw_table) <- raw_table[2,]\n  \n  # Clean up column name holding the NHL team name and remove excess rows\n  raw_table <- raw_table %>% \n    rename(Team = \"\") %>% \n    filter(Team != \"\") %>% \n    rename_all(~str_replace_all(.,\"\\\\-\", \"\\\\_\"))\n  \n  # Index the rows of the table holding Conference subheadings\n  conf_idx <- raw_table$Team %>% \n    grep(\"conf\", ., ignore.case = TRUE)\n  \n  # Store all Eastern conference results in a dataframe\n  east <- raw_table %>% \n    slice(1:(conf_idx[2] - 1)) %>% \n    filter(!str_detect(Team, regex(\"conf\", ignore_case = TRUE))) %>% \n    mutate(place = row_number(),\n           Team = str_trim(str_replace(Team, \"\\\\*|\\\\d\", \"\")),\n           playoffs = if_else(place <= 8, TRUE, FALSE))\n  \n  # Store all Western conference results in another dataframe\n  west <- raw_table %>% \n    slice(conf_idx[2]:n()) %>% \n    filter(!str_detect(Team, regex(\"conf\", ignore_case = TRUE))) %>% \n    mutate(place = row_number(),\n           Team = str_trim(str_replace(Team, \"\\\\*|\\\\d\", \"\")),\n           playoffs = if_else(place <= 8, TRUE, FALSE))\n  \n  # If user wants final conference standings, also get Stanley Cup match\n  if (div_conf == \"latefincnf\") {\n    \n    sc_match <- read_html(remDr$getPageSource()[[1]]) %>%\n      html_table(fill = TRUE) %>%\n      tail(1) %>%\n      .[[1]] %>% \n      filter(!str_detect(X1, regex(\"cup\", ignore_case = TRUE))) %>%\n      mutate(X1 = str_remove_all(X1, \"[\\\\d\\\\-]\") %>% \n               str_remove(\"\\\\w+$\") %>% \n               str_trim()) %>%\n      separate(X1, c(\"Winner\", \"Loser\"), \"  \")\n    \n  }\n  \n  return(\n    list(eastern = east,\n         western = west,\n         stanley_cup = if (exists(\"sc_match\")) sc_match else NA)\n  )\n  \n}\n```\n:::\n\n\nBelow are sample results of running the function. Looks like it works for season-end standings!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's get the season-end Eastern standings for the 2016 season\ngetStandings(\"2016\")$eastern %>% \n  kable() %>% \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                full_width = FALSE, font_size = 12)\n```\n:::\n\n\nLet's see how my Detroit Red Wings were doing on the day I was born...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrw <- getStandings(\"1993\", \"Feb\", \"14\")$western %>% \n  filter(Team == \"Detroit\")\n\ndrw %>% \n  kable() %>% \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                full_width = FALSE, font_size = 12)\n```\n:::\n\n\nA record of 31-21-7...not bad. Fun fact, Montreal won the cup that year.\n\nThat's it for now, thanks for reading. Hopefully more to come on this.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}